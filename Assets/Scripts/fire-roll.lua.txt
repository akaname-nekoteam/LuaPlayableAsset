--[[*****************************************************************************
	くるくる撃つよ
*****************************************************************************]]--

local delegate = nil
local fireDelay = 0.01 -- 0.01秒ごとに発射
local bulletTable = {}

----------------------------------------------------------------------------
function coSequence()
	local angle = 0
	local delay = 0
	local selfTransform = self:GetComponent( typeof( CS.UnityEngine.Transform))
	while true do
		if delay > 0 then
			delay = delay - CS.UnityEngine.Time.deltaTime
			goto continue
		else
			delay = fireDelay
		end
		angle = angle + 20
		dir = CS.UnityEngine.Quaternion.AngleAxis( angle, CS.UnityEngine.Vector3.forward) * CS.UnityEngine.Vector3.right

		bullet = CS.UnityEngine.GameObject( '弾丸')
		bullet:AddComponent( typeof( CS.BulletBehaviour))
		textMesh = bullet:AddComponent( typeof( CS.UnityEngine.TextMesh))
		textMesh.text = "弾"
		rigidbody = bullet:AddComponent( typeof( CS.UnityEngine.Rigidbody))
		rigidbody.transform.position = selfTransform.position
		rigidbody.velocity = 50 * dir
		rigidbody.useGravity = false

		::continue::
		coroutine.yield()
	end
end
----------------------------------------------------------------------------
function awake()
	delegate = coroutine.create( coSequence)
end
----------------------------------------------------------------------------
function ondestroy()
	delegate = nil
end
----------------------------------------------------------------------------
function update()
	if delegate ~= nil then
		coroutine.resume( delegate)
		if coroutine.status( delegate ) == "dead" then
			delegate = nil
		end
	end
end



